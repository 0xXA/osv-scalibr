// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package matchertest provides mock matcher for testing.
package matchertest

import (
	"context"
	"os"
	"slices"
	"testing"

	"deps.dev/util/resolve"
	"github.com/google/osv-scalibr/extractor"
	"github.com/ossf/osv-schema/bindings/go/osvschema"
	"gopkg.in/yaml.v3"
)

type mockVulnerabilityMatcher []*osvschema.Vulnerability

// MatchVulnerabilities returns all vulnerabilities in the mockVulnerabilityMatcher that affect each of the Inventory items.
func (mvc mockVulnerabilityMatcher) MatchVulnerabilities(ctx context.Context, invs []*extractor.Inventory) ([][]*osvschema.Vulnerability, error) {
	result := make([][]*osvschema.Vulnerability, len(invs))
	for i, inv := range invs {
		for _, vuln := range mvc {
			if vulnAffectsInv(vuln, inv) {
				result[i] = append(result[i], vuln)
			}
		}
	}
	return result, nil
}

type mockVulns struct {
	Vulns []*osvschema.Vulnerability `yaml:"vulns"`
}

// NewMockVulnerabilityMatcher creates a mock vulnerability matcher for testing.
// It loads vulnerability data from a YAML file specified by vulnsYAML.
func NewMockVulnerabilityMatcher(t *testing.T, vulnsYAML string) mockVulnerabilityMatcher {
	t.Helper()
	f, err := os.Open(vulnsYAML)
	if err != nil {
		t.Fatalf("failed opening mock vulns: %v", err)
	}
	defer f.Close()
	dec := yaml.NewDecoder(f)

	var vulns mockVulns
	if err := dec.Decode(&vulns); err != nil {
		t.Fatalf("failed decoding mock vulns: %v", err)
	}
	return mockVulnerabilityMatcher(vulns.Vulns)
}

// TODO(#454): similar logic will need to be used elsewhere in guided remediation.
func vulnAffectsInv(vuln *osvschema.Vulnerability, inv *extractor.Inventory) bool {
	resolveSys, ok := inv.Metadata.(resolve.System)
	if !ok {
		return false
	}
	sys := resolveSys.Semver()
	for _, affected := range vuln.Affected {
		if affected.Package.Ecosystem != inv.Ecosystem() ||
			affected.Package.Name != inv.Name {
			continue
		}
		if slices.Contains(affected.Versions, inv.Version) {
			return true
		}
		for _, r := range affected.Ranges {
			if r.Type != "ECOSYSTEM" &&
				!(r.Type == "SEMVER" && affected.Package.Ecosystem == "npm") {
				continue
			}
			events := slices.Clone(r.Events)
			eventVersion := func(e osvschema.Event) string {
				if e.Introduced != "" {
					return e.Introduced
				}
				if e.Fixed != "" {
					return e.Fixed
				}
				return e.LastAffected
			}
			slices.SortFunc(events, func(a, b osvschema.Event) int {
				aVer := eventVersion(a)
				bVer := eventVersion(b)
				if aVer == "0" {
					if bVer == "0" {
						return 0
					}
					return -1
				}
				if bVer == "0" {
					return 1
				}
				// sys.Compare on strings is expensive, should consider precomputing sys.Parse
				return sys.Compare(aVer, bVer)
			})
			idx, exact := slices.BinarySearchFunc(events, inv.Version, func(e osvschema.Event, v string) int {
				eVer := eventVersion(e)
				if eVer == "0" {
					return -1
				}
				return sys.Compare(eVer, v)
			})
			if exact {
				e := events[idx]
				// Version is exactly on a range-inclusive event
				if e.Introduced != "" || e.LastAffected != "" {
					return true
				}
			} else {
				// Version is between events, only match if previous event is Introduced
				if idx != 0 && events[idx-1].Introduced != "" {
					return true
				}
			}
		}
	}
	return false
}
